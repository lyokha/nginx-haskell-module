# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        2;

events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;

    #haskell load /var/lib/nginx/test_tools.so;

    #haskell ghc_extra_options
          #-optl-Wl,-rpath,/var/lib/nginx/x86_64-linux-ghc-8.6.1;

    haskell compile threaded modular /tmp/ngx_haskell_test_tools.hs '

{-# LANGUAGE TemplateHaskell, DeriveGeneric, TypeApplications #-}
{-# LANGUAGE RecordWildCards #-}

module TestTools where

import           NgxExport
import           NgxExport.Tools

import           Data.ByteString (ByteString)
import qualified Data.ByteString.Lazy as L
import qualified Data.ByteString.Lazy.Char8 as C8L
import           Data.Aeson
import           Data.IORef
import           Control.Monad
import           GHC.Generics

test :: ByteString -> Bool -> IO L.ByteString
test = const . return . L.fromStrict
ngxExportSimpleService \'test $
    PersistentService $ Just $ Sec 10

showAsLazyByteString :: Show a => a -> L.ByteString
showAsLazyByteString = C8L.pack . show

testRead :: Show a => a -> IO L.ByteString
testRead = return . showAsLazyByteString

testReadInt :: Int -> Bool -> IO L.ByteString
testReadInt = const . testRead
ngxExportSimpleServiceTyped \'testReadInt \'\'Int $
    PersistentService $ Just $ Sec 10

newtype Conf = Conf Int deriving (Read, Show)

testReadConf :: Conf -> Bool -> IO L.ByteString
testReadConf = const . testRead
ngxExportSimpleServiceTyped \'testReadConf \'\'Conf $
    PersistentService $ Just $ Sec 10

testConfStorage :: ByteString -> IO L.ByteString
testConfStorage = const $
    showAsLazyByteString <$> readIORef storage_Conf_testReadConf
ngxExportIOYY \'testConfStorage

data ConfWithDelay = ConfWithDelay { delay :: TimeInterval
                                   , value :: Int
                                   } deriving (Read, Show)

testReadConfWithDelay :: ConfWithDelay -> Bool -> IO L.ByteString
testReadConfWithDelay c@ConfWithDelay {..} fstRun = do
    unless fstRun $ threadDelaySec $ toSec delay
    testRead c
ngxExportSimpleServiceTyped \'testReadConfWithDelay \'\'ConfWithDelay $
    PersistentService Nothing

data ConfJSON = ConfJSONCon1 Int
              | ConfJSONCon2 deriving (Generic, Show)
instance FromJSON ConfJSON

testReadConfJSON :: ConfJSON -> Bool -> IO L.ByteString
testReadConfJSON = ignitionService testRead
ngxExportSimpleServiceTypedAsJSON \'testReadConfJSON \'\'ConfJSON
    SingleShotService

testReadIntHandler :: ByteString -> L.ByteString
testReadIntHandler = showAsLazyByteString .
    readFromByteString @(Maybe Int)
ngxExportYY \'testReadIntHandler

testReadConfHandler :: ByteString -> L.ByteString
testReadConfHandler = showAsLazyByteString .
    readFromByteString @(Maybe Conf)
ngxExportYY \'testReadConfHandler

testReadConfJSONHandler :: ByteString -> IO L.ByteString
testReadConfJSONHandler = return . showAsLazyByteString .
    readFromByteStringAsJSON @(Maybe ConfJSON)
ngxExportAsyncIOYY \'testReadConfJSONHandler

testReadConfWithRPtrHandler :: ByteString -> L.ByteString
testReadConfWithRPtrHandler = showAsLazyByteString .
    readFromByteStringWithRPtr @(Maybe Conf)
ngxExportYY \'testReadConfWithRPtrHandler

testReadConfWithRPtrJSONHandler :: ByteString -> L.ByteString
testReadConfWithRPtrJSONHandler = showAsLazyByteString .
    readFromByteStringWithRPtrAsJSON @(Maybe ConfJSON)
ngxExportYY \'testReadConfWithRPtrJSONHandler

    ';

    haskell_run_service simpleService_test
            $hs_test
            test;

    haskell_run_service simpleService_testReadInt
            $hs_testReadInt
            5000000;

    haskell_run_service simpleService_testReadConf
            $hs_testReadConf
            'Conf 20';

    haskell_run_service simpleService_testReadConfWithDelay
            $hs_testReadConfWithDelay
            'ConfWithDelay { delay = Sec 10, value = 12 }';

    haskell_run_service simpleService_testReadConfJSON
            $hs_testReadConfJSON
            '{"tag":"ConfJSONCon1", "contents":56}';

    server {
        listen       8010;
        server_name  main;
        error_log    /tmp/nginx-test-haskell-error.log;
        access_log   /tmp/nginx-test-haskell-access.log;

        location / {
            haskell_run testConfStorage $hs_testConfStorage '';

            echo "Service variables:";
            echo "  hs_test: $hs_test";
            echo "  hs_testReadInt: $hs_testReadInt";
            echo "  hs_testReadConf: $hs_testReadConf";
            echo "  hs_testReadConfWithDelay: $hs_testReadConfWithDelay";
            echo "  hs_testReadConfJSON: $hs_testReadConfJSON";
            echo "Storages of service variables:";
            echo "  hs_testConfStorage: $hs_testConfStorage";

            haskell_run testReadIntHandler
                    $hs_testReadIntHandler
                    -456;
            haskell_run testReadConfHandler
                    $hs_testReadConfHandler
                    'Conf 21';
            haskell_run_async testReadConfJSONHandler
                    $hs_testReadConfJSONHandler
                    '{"tag":"ConfJSONCon2"}';
            haskell_run_async testReadConfJSONHandler
                    $hs_testReadConfJSONHandlerBadInput
                    '{"tag":"Unknown"}';
            haskell_run testReadConfWithRPtrHandler
                    $hs_testReadConfWithRPtrHandler
                    '${_r_ptr}Conf 21';
            haskell_run testReadConfWithRPtrJSONHandler
                    $hs_testReadConfWithRPtrJSONHandler
                    '$_r_ptr
                     {"tag":"ConfJSONCon1", "contents":4}
                    ';

            echo "Handler variables:";
            echo "  hs_testReadIntHandler: $hs_testReadIntHandler";
            echo "  hs_testReadConfHandler: $hs_testReadConfHandler";
            echo "  hs_testReadConfJSONHandler: $hs_testReadConfJSONHandler";
            echo "  hs_testReadConfJSONHandlerBadInput: $hs_testReadConfJSONHandlerBadInput";
            echo "  hs_testReadConfWithRPtrHandler: $hs_testReadConfWithRPtrHandler";
            echo "  hs_testReadConfWithRPtrJSONHandler: $hs_testReadConfWithRPtrJSONHandler";
        }
    }
}

# vim: ft=nginx
