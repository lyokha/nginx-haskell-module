ngx_addon_name=ngx_http_haskell_module
ngx_http_haskell_module_dir=$ngx_addon_dir

NGX_HTTP_HASKELL_MODULE_DEPS="                                              \
        $ngx_addon_dir/src/${ngx_addon_name}.h                              \
        $ngx_addon_dir/src/ngx_http_haskell_standalone.h                    \
        $ngx_addon_dir/src/ngx_http_haskell_compile.h                       \
        $ngx_addon_dir/src/ngx_http_haskell_load.h                          \
        $ngx_addon_dir/src/ngx_http_haskell_handler.h                       \
        $ngx_addon_dir/src/ngx_http_haskell_content_handler.h               \
        $ngx_addon_dir/src/ngx_http_haskell_async_handler.h                 \
        $ngx_addon_dir/src/ngx_http_haskell_service.h                       \
        $ngx_addon_dir/src/ngx_http_haskell_util.h                          \
        "

NGX_HTTP_HASKELL_MODULE_SRCS="                                              \
        $ngx_addon_dir/src/${ngx_addon_name}.c                              \
        $ngx_addon_dir/src/ngx_http_haskell_standalone.c                    \
        $ngx_addon_dir/src/ngx_http_haskell_compile.c                       \
        $ngx_addon_dir/src/ngx_http_haskell_load.c                          \
        $ngx_addon_dir/src/ngx_http_haskell_handler.c                       \
        $ngx_addon_dir/src/ngx_http_haskell_content_handler.c               \
        $ngx_addon_dir/src/ngx_http_haskell_async_handler.c                 \
        $ngx_addon_dir/src/ngx_http_haskell_service.c                       \
        $ngx_addon_dir/src/ngx_http_haskell_util.c                          \
        "

NGX_HASKELL_MODULE_LIBDL=

if echo "$CORE_LIBS" | grep -v "\\(\\s\\+\\|^\\)$NGX_LIBDL\\>" >/dev/null 2>&1
then
    NGX_HASKELL_MODULE_LIBDL="$NGX_LIBDL"
fi

if test -z "$GHC_PROGRAM"
then
    ngx_ghc_program=ghc
else
    ngx_ghc_program="$GHC_PROGRAM"
fi

if ! command -v "$ngx_ghc_program" > /dev/null 2>&1
then
    echo "$0: error: unable to find ghc executable!"
    echo "   Check that GHC is installed "`
        `"or specify environment variable GHC_PROGRAM"
    exit 1
fi

ngx_ghc_include_path="$($ngx_ghc_program --print-libdir)/include"
if test ! -e "$ngx_ghc_include_path"
then
    # GHC built with Hadrian may put include/ path at one level upper,
    # see https://gitlab.haskell.org/ghc/ghc/-/issues/21609
    ngx_ghc_include_path="$($ngx_ghc_program --print-libdir)/../include"
    if test ! -e "$ngx_ghc_include_path"
    then
        echo "$0: error: unable to find GHC include/ path!"
        exit 1
    fi
fi

if test -n "$ngx_module_link"
then
    ngx_module_type=HTTP
    ngx_module_name=$ngx_addon_name
    ngx_module_deps="$NGX_HTTP_HASKELL_MODULE_DEPS"
    ngx_module_srcs="$NGX_HTTP_HASKELL_MODULE_SRCS"
    ngx_module_incs="$ngx_ghc_include_path"
    ngx_module_libs="$NGX_HASKELL_MODULE_LIBDL"

    . auto/module

    ngx_feature="haskell_module_attach_reuseport_cbpf"
    ngx_feature_name="NGX_HTTP_HASKELL_MODULE_HAVE_SO_ATTACH_REUSEPORT_CBPF"
    ngx_feature_run=no
    ngx_feature_incs="#include <linux/filter.h>
                      #include <sys/socket.h>"
    ngx_feature_path=
    ngx_feature_libs=
    ngx_feature_test="struct sock_filter  bpf_code[] = {
                          { 0x6, 0, 0, 0x00000000 }
                      };
                      struct sock_fprog   bpf = {
                          .len = 1, .filter = bpf_code
                      };
                      if (setsockopt(0, SOL_SOCKET, SO_ATTACH_REUSEPORT_CBPF,
                          (const void *) &bpf, sizeof(bpf)) == -1) {
                          return 1;
                      }"

    . auto/feature
else
    HTTP_MODULES="$HTTP_MODULES $ngx_addon_name"
    NGX_ADDON_DEPS="$NGX_ADDON_DEPS $NGX_HTTP_HASKELL_MODULE_DEPS"
    NGX_ADDON_SRCS="$NGX_ADDON_SRCS $NGX_HTTP_HASKELL_MODULE_SRCS"
    CFLAGS="$CFLAGS -I$ngx_ghc_include_path"
    CORE_LIBS="$CORE_LIBS $NGX_HASKELL_MODULE_LIBDL"
fi

# uncomment next line to enable experimental shared read locks in shm
#CFLAGS="$CFLAGS -DNGX_HTTP_HASKELL_SHM_USE_SHARED_RLOCK"

