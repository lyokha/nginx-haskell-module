#!/bin/bash

NARGS=$#

PATCHELF=patchelf
CABAL_PLAN=cabal-plan

HSLIB=
DIR=
TARGET_DIR=
ARCHIVE=
DEF_DIR=.hslibs
PATCH_ONLY=
PRINT_DIRDEPS=

usage()
{
    echo "Usage: $(basename "$0") [-d dir -a ar | -p] [-t target_dir] hslib"
    echo "       $(basename "$0") -e"
    echo "  'dir' is a directory where dependent libraries will be"
    echo "      collected (default is $DEF_DIR)"
    echo "  'target_dir' is a directory where dependent libraries will be"
    echo "      installed (no default, 'hslib' will not be patched if omitted)"
    echo "  'ar' is a the base name of the archive to contain 'hslib' and"
    echo "      'dir' (no default, the archive will not be created if omitted)"
    echo "  if -p (patch-only) is specified then dependent libraries will"
    echo "      not be collected nor archived"
    echo "  special value '-' for 'dir', 'target_dir', and 'ar' resets them"
    echo "      (with -d- being equivalent to -p)"
    echo "  with -e, print all direct dependencies found by cabal-plan,"
    echo "      the output is compatible with format of GHC environment files"
}

while [ "$1" ]
do
    case $1 in
        -h|-help|--help)    usage ; exit 0 ;;
        -d*)                OPTVAL=$(echo "$1" | cut -c3-)
                            if [ -n "$OPTVAL" ]
                            then
                                DIR=$OPTVAL
                            else
                                shift ; DIR=$1
                            fi ;;
        -t*)                OPTVAL=$(echo "$1" | cut -c3-)
                            if [ -n "$OPTVAL" ]
                            then
                                TARGET_DIR=$OPTVAL
                            else
                                shift ; TARGET_DIR=$1
                            fi ;;
        -a*)                OPTVAL=$(echo "$1" | cut -c3-)
                            if [ -n "$OPTVAL" ]
                            then
                                ARCHIVE=$OPTVAL
                            else
                                shift ; ARCHIVE=$1
                            fi ;;
        -p)                 PATCH_ONLY=1 ;;
        -e)                 PRINT_DIRDEPS=1 ;;
        -*)                 usage ; exit 1 ;;
        *)                  if [ -n "$HSLIB" ]
                            then
                                usage ; exit 1
                            else
                                HSLIB=$1
                            fi ;;
    esac
    shift
done

if [ "$PRINT_DIRDEPS" = 1 ]
then
    (( NARGS > 1 )) && { usage ; exit 1 ; }
    if ! $CABAL_PLAN --version >/dev/null 2>&1
    then
        echo "Required utility $CABAL_PLAN was not found!" 1>&2
        exit 2
    fi
    PLAN=$($CABAL_PLAN info --ascii)
    RET=$?
    [ -z "$PLAN" ] && exit $RET
    UNIT_ID="^UnitId\s\+\""
    while IFS= read -r pkg
    do sed -n "/$UNIT_ID$pkg/s/$UNIT_ID\(.*\)\"\$/package-id \1/p" <<< "$PLAN"
    done < <(sed -n '/^CompNameLib$/,/^$/s/^\s\+//p' <<< "$PLAN") |
        awk '!x[$0]++'
    exit 0
fi

[ -z "$HSLIB" ] && { usage ; exit 1 ; }

if [ ! -f "$HSLIB" ]
then
    echo "File $HSLIB does not exist or not a regular file!" 1>&2
    exit 3
fi

[ "$DIR" = - ] && PATCH_ONLY=1
[ "$TARGET_DIR" = - ] && TARGET_DIR=
[ "$ARCHIVE" = - ] && ARCHIVE=

if [ -z "$PATCH_ONLY" ]
then
    echo "---> Collecting libraries"
    LIBS=$(ldd "$HSLIB" | grep -E '^\s*libHS')
    TEST_LIBS=$(echo "$LIBS" | grep -E -v '\s+=>\s+/')
    if [ -n "$TEST_LIBS" ]
    then
        echo "There were errors while collecting Haskell libraries:" 1>&2
        echo "$TEST_LIBS" 1>&2
        exit 4
    fi
    LIBS=$(echo "$LIBS" | sed -E 's/^(.*)\s+=>\s+(\S+).*/\2/')
    [ -z "$DIR" ] && DIR=$DEF_DIR
    mkdir -p "$DIR"
    cp -uv $LIBS "$DIR"
fi

if [ -n "$TARGET_DIR" ]
then
    [ -z "$PATCH_ONLY" ] && echo
    echo "---> Patching $HSLIB"
    if ! $PATCHELF --version >/dev/null 2>&1
    then
        echo "Required utility $PATCHELF was not found!" 1>&2
        exit 2
    fi
    RPATH=$($PATCHELF --print-rpath "$HSLIB")
    if ! echo "$RPATH" | grep -E "(^|:)$TARGET_DIR(:|$)" >/dev/null 2>&1
    then
        $PATCHELF --set-rpath "$TARGET_DIR:$RPATH" "$HSLIB"
    fi
    $PATCHELF --print-rpath "$HSLIB"
fi

if [ -z "$PATCH_ONLY" ] && [ -n "$ARCHIVE" ]
then
    echo
    echo "---> Archiving artifacts"
    tar czvf "$ARCHIVE".tar.gz "$HSLIB" "$DIR"
fi

