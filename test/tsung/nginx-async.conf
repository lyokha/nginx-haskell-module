# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        2;

events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;

    #haskell ghc_extra_options -XTupleSections -XMagicHash;

    #haskell compile threaded standalone /tmp/ngx_haskell.hs '

#import qualified Data.ByteString.Char8 as C8
#import qualified Data.ByteString.Lazy.Char8 as C8L
#import           Data.ByteString.Unsafe
#import           Data.ByteString.Internal (accursedUnutterablePerformIO)
#import           Network.HTTP.Client
#import           Control.Concurrent
#import qualified Control.Concurrent.MSem as S
#import           Control.Exception
#import           Control.Monad
#import           System.IO.Unsafe
#import           Safe

#catchHttpException = (`catch` \e ->
        #return $ C8L.pack $ "HTTP EXCEPTION: " ++ show (e :: HttpException))

#getResponse (C8.unpack -> url) = fmap responseBody . (parseRequest url >>=)

#httpManager = unsafePerformIO $ newManager defaultManagerSettings
#{-# NOINLINE httpManager #-}

#getUrl url = catchHttpException $ getResponse url $ flip httpLbs httpManager
#NGX_EXPORT_ASYNC_IOY_Y (getUrl)

#httpManagerConnTimeout = unsafePerformIO $ newManager defaultManagerSettings
    #{ managerResponseTimeout = responseTimeoutMicro 1 }
#{-# NOINLINE httpManagerConnTimeout #-}

#unsafeGetUrlConnTimeout url = getResponse url $
    #flip httpLbs httpManagerConnTimeout
#NGX_EXPORT_ASYNC_IOY_Y (unsafeGetUrlConnTimeout)

#sem1 = unsafePerformIO $ S.new 1
#{-# NOINLINE sem1 #-}

#getUrl1 url = do
    #man <- newManager defaultManagerSettings
    #catchHttpException $ getResponse url $ S.with sem1 . flip httpLbs man
#NGX_EXPORT_ASYNC_IOY_Y (getUrl1)

#threadDelaySec = threadDelay . (* 10^6)

#delay (readDef 0 . C8.unpack -> v) =
    #threadDelaySec v >> return (C8L.pack $ show v)
#NGX_EXPORT_ASYNC_IOY_Y (delay)

#delay1 (readDef 0 . C8.unpack -> v) =
    #S.with sem1 (threadDelaySec v) >> return (C8L.pack $ show v)
#NGX_EXPORT_ASYNC_IOY_Y (delay1)

#getUrlService url firstRun = do
    #unless firstRun $ threadDelaySec 20
    #getUrl url
#NGX_EXPORT_SERVICE_IOY_Y (getUrlService)

#getIOValue = const $ return $ C8L.pack "HELLO WORLD!"
#NGX_EXPORT_IOY_Y (getIOValue)

#reqBody = const . return
#NGX_EXPORT_ASYNC_ON_REQ_BODY (reqBody)

#reqHead a n = return $ C8L.concat $ take (readDef 0 $ C8.unpack n) $
    #map (`C8L.append` C8L.pack "\\n") $ C8L.lines a
#NGX_EXPORT_ASYNC_ON_REQ_BODY (reqHead)

#reqFld a fld = return $ maybe C8L.empty C8L.tail $
    #lookup (C8L.fromStrict fld) $ map (C8L.break (== \'=\')) $
    #C8L.split \'&\' a
#NGX_EXPORT_ASYNC_ON_REQ_BODY (reqFld)

#reqBodyTouch = (return .) . const . return C8L.empty
#NGX_EXPORT_ASYNC_ON_REQ_BODY (reqBodyTouch)

#getUrlContent url = (, packLiteral 9 "text/html"#, 200, []) <$> getUrl url
    #where packLiteral l s =
              #accursedUnutterablePerformIO $ unsafePackAddressLen l s
#NGX_EXPORT_ASYNC_HANDLER (getUrlContent)

    #';

    haskell compile threaded /tmp/ngx_haskell.hs '

{-# LANGUAGE ViewPatterns, TupleSections, MagicHash #-}

module NgxHaskellUserRuntime where

import           NgxExport
import qualified Data.ByteString.Char8 as C8
import qualified Data.ByteString.Lazy.Char8 as C8L
import           Data.ByteString.Unsafe
import           Data.ByteString.Internal (accursedUnutterablePerformIO)
import           Network.HTTP.Client
import           Control.Concurrent
import qualified Control.Concurrent.MSem as S
import           Control.Exception
import           Control.Monad
import           System.IO.Unsafe
import           Safe

catchHttpException = (`catch` \e ->
        return $ C8L.pack $ "HTTP EXCEPTION: " ++ show (e :: HttpException))

getResponse (C8.unpack -> url) = fmap responseBody . (parseRequest url >>=)

httpManager = unsafePerformIO $ newManager defaultManagerSettings
{-# NOINLINE httpManager #-}

getUrl url = catchHttpException $ getResponse url $ flip httpLbs httpManager
ngxExportAsyncIOYY \'getUrl

httpManagerConnTimeout = unsafePerformIO $ newManager defaultManagerSettings
    { managerResponseTimeout = responseTimeoutMicro 1 }
{-# NOINLINE httpManagerConnTimeout #-}

unsafeGetUrlConnTimeout url = getResponse url $
    flip httpLbs httpManagerConnTimeout
ngxExportAsyncIOYY \'unsafeGetUrlConnTimeout

sem1 = unsafePerformIO $ S.new 1
{-# NOINLINE sem1 #-}

getUrl1 url = do
    man <- newManager defaultManagerSettings
    catchHttpException $ getResponse url $ S.with sem1 . flip httpLbs man
ngxExportAsyncIOYY \'getUrl1

threadDelaySec = threadDelay . (* 10^6)

delay (readDef 0 . C8.unpack -> v) =
    threadDelaySec v >> return (C8L.pack $ show v)
ngxExportAsyncIOYY \'delay

delay1 (readDef 0 . C8.unpack -> v) =
    S.with sem1 (threadDelaySec v) >> return (C8L.pack $ show v)
ngxExportAsyncIOYY \'delay1

getUrlService url firstRun = do
    unless firstRun $ threadDelaySec 20
    getUrl url
ngxExportServiceIOYY \'getUrlService

getIOValue = const $ return $ C8L.pack "HELLO WORLD!"
ngxExportIOYY \'getIOValue

reqBody = const . return
ngxExportAsyncOnReqBody \'reqBody

reqHead a n = return $ C8L.concat $ take (readDef 0 $ C8.unpack n) $
    map (`C8L.append` C8L.pack "\\n") $ C8L.lines a
ngxExportAsyncOnReqBody \'reqHead

reqFld a fld = return $ maybe C8L.empty C8L.tail $
    lookup (C8L.fromStrict fld) $ map (C8L.break (== \'=\')) $
    C8L.split \'&\' a
ngxExportAsyncOnReqBody \'reqFld

reqBodyTouch = (return .) . const . return C8L.empty
ngxExportAsyncOnReqBody \'reqBodyTouch

getUrlContent url = (, packLiteral 9 "text/html"#, 200, []) <$> getUrl url
    where packLiteral l s =
              accursedUnutterablePerformIO $ unsafePackAddressLen l s
ngxExportAsyncHandler \'getUrlContent

    ';

    haskell_run_service getUrlService $hs_service_ya "http://ya.ru";
    haskell_run_service getUrlService $hs_service_httpbin "http://httpbin.org";

    server {
        listen       8010;
        server_name  main;
        error_log    /tmp/nginx-test-haskell-error.log;
        access_log   /tmp/nginx-test-haskell-access.log;

        location / {
            haskell_run_async getUrl $hs_async_ya
                    "http://ya.ru";
            haskell_run_async getUrl $hs_async_httpbin
                    "http://httpbin.org";
            haskell_run_async getUrl $hs_async_hackage
                    "http://hackage.haskell.org";
            echo "------> YA.RU:\n\n$hs_async_ya\n";
            echo "------> HTTPBIN.ORG:\n\n$hs_async_httpbin\n";
            echo "------> HACKAGE.HASKELL.ORG:\n\n$hs_async_hackage";
        }

        location /rewrite {
            #echo "HERE";
            rewrite ^ / last;
        }

        location /delay {
            haskell_run_async delay $hs_async_elapsed $arg_a;
            echo "Elapsed $hs_async_elapsed seconds";
        }

        location /rb {
            client_body_buffer_size 100k;
            haskell_run_async_on_request_body reqBody $hs_rb noarg;
            haskell_run_async_on_request_body reqFld $hs_rb_fld $arg_a;
            haskell_run_async_on_request_body reqHead $hs_rb_head $arg_a;
            echo ">>> BODY\n";
            echo $hs_rb;
            echo ">>> BODY HEAD $arg_a\n";
            echo $hs_rb_head;
            echo ">>> FIELD $arg_a\n";
            echo $hs_rb_fld;
        }

        location /rb/touch {
            client_body_buffer_size 100k;
            haskell_run_async_on_request_body reqBodyTouch $hs_dummy noarg;
            if ($request_body) {
                echo $request_body;
                break;
            }
            echo Fail;
        }

        location /async {
            haskell_run_async getUrl $hs_async_test "http://localhost:8020/";
            echo -n $hs_async_test;
        }

        location /asyncConnTimeout {
            haskell_run_async unsafeGetUrlConnTimeout $hs_async_test
                    "http://localhost:8020/";
            echo -n $hs_async_test;
        }

        location /ya {
            echo $hs_service_ya;
        }

        location /httpbin {
            echo $hs_service_httpbin;
        }

        location /1 {
            haskell_run_async getUrl1 $hs_async_ya
                    "http://ya.ru";
            haskell_run_async getUrl1 $hs_async_httpbin
                    "http://httpbin.org";
            haskell_run_async getUrl1 $hs_async_hackage
                    "http://hackage.haskell.org";
            echo "------> YA.RU:\n\n$hs_async_ya\n";
            echo "------> HTTPBIN.ORG:\n\n$hs_async_httpbin\n";
            echo "------> HACKAGE.HASKELL.ORG:\n\n$hs_async_hackage";
        }

        location /delay1 {
            haskell_run_async delay1 $hs_async_elapsed $arg_a;
            echo "Elapsed $hs_async_elapsed seconds";
        }

        location /io {
            haskell_run getIOValue $hs_val "";
            echo $hs_val;
        }

        location /content {
            haskell_async_content getUrlContent "http://httpbin.org";
        }
    }

    server {
        listen       8020;
        server_name  backend;

        location / {
            echo "Hello main!";
        }
    }
}

# vim: ft=nginx
